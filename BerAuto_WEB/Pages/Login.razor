@page "/login"
@using BerAuto.DTO
@using BerAuto_WEB.Services
@using Blazored.LocalStorage
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage

<div class="login-container">
    <h3>Login</h3>
    
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        
        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Password:</label>
            <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
</div>

@code {
    private LoginDTO loginModel = new LoginDTO();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            var response = await AuthService.Login(loginModel);
            
            if (response != null)
            {
                // Store the tokens in local storage or service
                // You might want to create a separate service for managing authentication state
                await localStorage.SetItemAsync("authToken", response.AccessToken);
                await localStorage.SetItemAsync("refreshToken", response.RefreshToken);
                
                // Optionally store user info
                await localStorage.SetItemAsync("userId", response.UserId);
                await localStorage.SetItemAsync("userEmail", response.Email);
                await localStorage.SetItemAsync("userName", response.Name);
                await localStorage.SetItemAsync("userRole", response.AccesLevel);

                // Redirect to home page or dashboard
                NavigationManager.NavigateTo("/");
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Login failed. Please check your credentials.";
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
        }
    }
}

<style>
    .login-container {
        max-width: 400px;
        margin: 2rem auto;
        padding: 2rem;
        border: 1px solid #ddd;
        border-radius: 8px;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        margin-top: 0.25rem;
    }

    .btn-primary {
        margin-top: 1rem;
    }
</style>